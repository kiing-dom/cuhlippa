name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual releases
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      release_title:
        description: 'Custom release title'
        required: false
        default: ''
      release_notes:
        description: 'Custom release notes (markdown supported)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    name: Prepare Release Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_title: ${{ steps.release_info.outputs.title }}
      release_body: ${{ steps.release_info.outputs.body }}
      is_prerelease: ${{ steps.release_info.outputs.prerelease }}
      is_draft: ${{ steps.release_info.outputs.draft }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
        
    - name: Prepare release information
      id: release_info
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Set release title
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_title }}" ]; then
          echo "title=${{ github.event.inputs.release_title }}" >> $GITHUB_OUTPUT
        else
          echo "title=Cuhlippa v${VERSION} - Professional Clipboard Sync" >> $GITHUB_OUTPUT
        fi
        
        # Set prerelease and draft flags
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          echo "draft=${{ github.event.inputs.draft }}" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "draft=false" >> $GITHUB_OUTPUT
        fi
        
        # Create release body
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_notes }}" ]; then
          # Use custom release notes
          cat > release_body.md << 'EOF'
        ${{ github.event.inputs.release_notes }}
        EOF
        else
          # Generate standard release notes
          cat > release_body.md << EOF
        # 🚀 Cuhlippa v${VERSION} - Professional Clipboard Synchronization
        
        **Ready for production use!** Zero-configuration clipboard sync with automatic device discovery.
        
        ## ✨ Key Features
        - **🔍 Automatic Device Discovery** - No manual IP configuration needed
        - **📱 Cross-Platform Support** - Windows, macOS, and Linux native installers
        - **🖼️ Rich Content Sync** - Text, images, files up to 10MB
        - **🔒 Enterprise Security** - Optional AES encryption
        - **🎨 Professional UI** - Modern interface with dark/light themes
        - **⚡ Real-Time Sync** - Instant clipboard synchronization
        
        ## 📦 Installation Options
        
        ### Native Installers (Recommended)
        - **Windows**: \`Cuhlippa-Windows-${VERSION}.msi\` - Double-click to install
        - **macOS**: \`Cuhlippa-macOS-${VERSION}.dmg\` - Drag to Applications
        - **Linux**: \`Cuhlippa-Linux-${VERSION}.deb\` - \`sudo apt install ./cuhlippa*.deb\`
        
        ### Portable Version
        - **All Platforms**: \`cuhlippa-${VERSION}.zip\` - Requires Java 17+
        
        ## 🚀 Quick Start Guide
        
        ### Native Installers (Zero Configuration)
        1. Download the installer for your platform
        2. Install and launch Cuhlippa
        3. Follow the setup wizard - automatic networking included!
        
        ## 🔧 System Requirements
        
        ### Native Installers
        - **Windows**: Windows 10+ (64-bit)
        - **macOS**: macOS 10.14+ (Mojave)
        - **Linux**: Ubuntu 18.04+, CentOS 7+
        - **Java**: Bundled - no separate installation needed!
        
        ## 📋 What's New in v${VERSION}
        - ✅ First-run setup wizard for non-technical users
        - ✅ Automatic embedded server with zero-config networking
        - ✅ User-friendly error messages (no technical jargon)
        - ✅ Native installers with bundled Java runtime
        - ✅ Professional UI with intuitive terminology
        
        ## 🚨 Troubleshooting
        
        **Can't find other devices?**
        - Ensure all devices are on the same WiFi network
        - Check firewall settings (ports 8080/8081)
        - Try the manual IP connection option
        
        ---
        
        **Enterprise-ready clipboard synchronization** - Download now and sync effortlessly! 🎯
        EOF
        fi
        
        # Store the release body as output
        echo "body<<EOF" >> $GITHUB_OUTPUT
        cat release_body.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and package
      run: mvn clean package -pl packaging -am -DskipTests
      
    - name: Rename installer
      run: |
        $version = "${{ needs.prepare-release.outputs.version }}"
        cd packaging/target/installer
        if (Test-Path "cuhlippa-*.msi") {
          Get-ChildItem -Name "cuhlippa-*.msi" | ForEach-Object { Rename-Item $_ "Cuhlippa-Windows-$version.msi" }
        } else {
          Write-Host "No MSI file found"
          Get-ChildItem
        }
        
    - name: Upload Windows Installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: packaging/target/installer/Cuhlippa-Windows-*.msi
        
  build-macos:
    name: Build macOS Installer  
    runs-on: macos-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and package
      run: mvn clean package -pl packaging -am -DskipTests -P macos
      
    - name: Rename installer
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        cd packaging/target/installer
        if ls cuhlippa*.dmg 1> /dev/null 2>&1; then
          for file in cuhlippa*.dmg; do
            mv "$file" "Cuhlippa-macOS-$VERSION.dmg"
            break
          done
        else
          echo "No DMG file found"
          ls -la
        fi
        
    - name: Upload macOS Installer
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: packaging/target/installer/Cuhlippa-macOS-*.dmg
        
  build-linux:
    name: Build Linux Installer
    runs-on: ubuntu-latest 
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and package
      run: mvn clean package -pl packaging -am -DskipTests -P linux
      
    - name: Rename installer
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        cd packaging/target/installer
        if ls cuhlippa*.deb 1> /dev/null 2>&1; then
          for file in cuhlippa*.deb; do
            mv "$file" "Cuhlippa-Linux-$VERSION.deb"
            break
          done
        else
          echo "No DEB file found"
          ls -la
        fi
        
    - name: Upload Linux Installer
      uses: actions/upload-artifact@v4
      with:
        name: linux-installer
        path: packaging/target/installer/Cuhlippa-Linux-*.deb

  build-portable:
    name: Build Portable Package
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build applications
      run: mvn clean package -DskipTests
      
    - name: Create portable package
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        mkdir -p release/cuhlippa-$VERSION
        cd release/cuhlippa-$VERSION
        
        # Copy JARs
        cp ../../server/target/cuhlippa-server-*.jar ./cuhlippa-server.jar
        cp ../../client/target/cuhlippa-client-*-jar-with-dependencies.jar ./cuhlippa-client.jar
        
        # Create launcher scripts
        cat > start-server.sh << 'EOF'
        #!/bin/bash
        echo "🌐 Starting Cuhlippa Server..."
        java -Xms256m -Xmx1g -jar cuhlippa-server.jar
        EOF
        
        cat > start-client.sh << 'EOF'
        #!/bin/bash
        echo "📋 Starting Cuhlippa Client..."
        java -Xms128m -Xmx512m -jar cuhlippa-client.jar
        EOF
        
        cat > start-server.bat << 'EOF'
        @echo off
        title Cuhlippa Server
        echo 🌐 Starting Cuhlippa Server...
        java -Xms256m -Xmx1g -jar cuhlippa-server.jar
        pause
        EOF
        
        cat > start-client.bat << 'EOF'
        @echo off
        title Cuhlippa Client
        echo 📋 Starting Cuhlippa Client...
        java -Xms128m -Xmx512m -jar cuhlippa-client.jar
        pause
        EOF
        
        # Make shell scripts executable
        chmod +x start-server.sh start-client.sh
        
        # Copy documentation
        cp ../../README.md ./
        
        # Create quick start guide
        cat > QUICK_START.md << EOF
        # Cuhlippa v$VERSION - Quick Start
        
        ## Requirements
        - Java 17+ installed on all devices
        - All devices on same local network
        
        ## Setup
        1. **Start Server** (on one device): Run start-server.bat/.sh
        2. **Start Clients** (on all devices): Run start-client.bat/.sh  
        3. **Connect**: Settings → Sync → Discover Devices
        
        ## Troubleshooting
        - Ensure ports 8080/8081 are open in firewall
        - Check all devices are on same WiFi network
        - Try manual IP connection if auto-discovery fails
        EOF
        
    - name: Create ZIP package
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        cd release
        zip -r "cuhlippa-$VERSION.zip" "cuhlippa-$VERSION/"
        sha256sum "cuhlippa-$VERSION.zip" > "cuhlippa-$VERSION.zip.sha256"
        
    - name: Upload Portable Package
      uses: actions/upload-artifact@v4
      with:
        name: portable-package
        path: |
          release/cuhlippa-*.zip
          release/cuhlippa-*.zip.sha256

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-windows, build-macos, build-linux, build-portable]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Display downloaded artifacts
      run: find ./artifacts -type f -name "*" | head -20
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', needs.prepare-release.outputs.version) || github.ref_name }}
        name: ${{ needs.prepare-release.outputs.release_title }}
        body: ${{ needs.prepare-release.outputs.release_body }}
        draft: ${{ needs.prepare-release.outputs.is_draft }}
        prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
        files: |
          ./artifacts/windows-installer/Cuhlippa-Windows-*.msi
          ./artifacts/macos-installer/Cuhlippa-macOS-*.dmg
          ./artifacts/linux-installer/Cuhlippa-Linux-*.deb
          ./artifacts/portable-package/cuhlippa-*.zip
          ./artifacts/portable-package/cuhlippa-*.zip.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
